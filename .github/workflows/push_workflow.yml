name: iProcure CI/CD Workflow
on:
  push:
    branches:
      - main
      - develop
      - staging
      - features/**

jobs:
  build:
    runs-on: ubuntu-latest
    # Service container Mysql
    services:
      # Label used to access the service container
      mysql:
        # Docker Hub image (also with version)
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: secret
          MYSQL_DATABASE: iproc
        ## map the "external" 33306 port with the "internal" 3306
        ports:
          - 3306:3306
        # Set health checks to wait until mysql database has started (it takes some seconds to start)
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    strategy:
      matrix:
        operating-system: [ubuntu-latest]
        php-versions: ["8.0","8.1"]
        dependency-stability: [prefer-stable]

    name: php-${{ matrix.php-versions }} testing on ${{ matrix.operating-system }}

    steps:
      - uses: actions/checkout@v2
      - name: Install PHP versions
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
      - name: Setup .env file
        run: php -r "file_exists('.env') || copy('.env.example', '.env');"
      - name: Install Dependencies
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist -v
      - name: Setup application key
        run: php artisan key:generate
      - name: Fix permissions for dirs
        run: chmod -R 777 storage bootstrap/cache
      - name: Check PHP Version
        run: php -v
      - name: Show Laravel versions
        run: php artisan --version
      - name: Run database migrations and tests on PHP ${{ matrix.php-versions }}"
        env:
          DB_CONNECTION: mysql
          DB_DATABASE: iproc
          DB_PORT: 3306
          DB_USER: root
          DB_PASSWORD: secret
        run: |
          php artisan migrate:fresh --seed -vv
          php artisan jwt:secret
          vendor/bin/pest
  code-style:
    needs: build
    name: code-quality-checks ðŸ›¡
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Execute Code Sniffer via phpcs
        run: |
          composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist
          php -r "file_exists('.env') || copy('.env.example', '.env');"
          php artisan key:generate
          chmod -R 777 storage bootstrap/cache
          composer require --dev squizlabs/php_codesniffer
          vendor/bin/phpcs --exclude=Generic.Files.LineLength app

  deploy-production:
    name: deploy-to-production ðŸš€
    runs-on: ubuntu-latest
    needs: [code-style]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v1
      - name: Setup PHP
        uses: shivammathur/setup-php@master
        with:
          php-version: 8.1
          extensions: mbstring, bcmath
      - name: Composer install
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-suggest --no-progress --prefer-dist
      - name: Setup Deployer
        uses: atymic/deployer-php-action@master
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
          ssh-known-hosts: ${{ secrets.SSH_KNOWN_HOSTS }}
      - name: Deploy to production
        env:
          DOT_ENV: ${{ secrets.DOT_ENV_PRODUCTION }}
        run: php vendor/bin/dep deploy production --tag=${{ env.GITHUB_REF }}

  deploy-develop:
    name: deploy-to-development ðŸ› 
    runs-on: ubuntu-latest
    needs: [code-style]
    if: github.ref == 'refs/heads/develop'
    steps:
      - uses: actions/checkout@v1
      - name: Setup PHP
        uses: shivammathur/setup-php@master
        with:
          php-version: 8.1
          extensions: mbstring, bcmath
      - name: Composer install
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-suggest --no-progress --prefer-dist
      - name: Setup Deployer
        uses: atymic/deployer-php-action@master
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
          ssh-known-hosts: ${{ secrets.SSH_KNOWN_HOSTS }}
      - name: Deploy to development
        env:
          DOT_ENV: ${{ secrets.DOT_ENV_PRODUCTION }}
        run: php vendor/bin/dep deploy develop --tag=${{ env.GITHUB_REF }} -v

  deploy-staging:
    name: deploy-to-staging ðŸ§ª
    runs-on: ubuntu-latest
    needs: [code-style]
    if: github.ref == 'refs/heads/staging'
    steps:
      - uses: actions/checkout@v1
      - name: Setup PHP
        uses: shivammathur/setup-php@master
        with:
          php-version: 8.1
          extensions: mbstring, bcmath
      - name: Composer install
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-suggest --no-progress --prefer-dist
      - name: Setup Deployer
        uses: atymic/deployer-php-action@master
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
          ssh-known-hosts: ${{ secrets.SSH_KNOWN_HOSTS }}
      - name: Deploy to Staging
        env:
          DOT_ENV: ${{ secrets.DOT_ENV_STAGING }}
        run: php vendor/bin/dep deploy staging --tag=${{ env.GITHUB_REF }} -v
